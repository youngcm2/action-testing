name: Marketplace Publish (Dev)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write # for checkout and tag
  actions: write # updating envs
  pull-requests: write # for comments
  packages: write # for publish

jobs:
  release-prep:
    runs-on: "ubuntu-latest"
    outputs:
      semver: ${{steps.semver.outputs.full}}
      sha: ${{ steps.release.outputs.sha }}
      release_created: ${{ steps.release.outputs.release_created }}
      branch: ${{ steps.branch_names.outputs.current_branch }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        name: release-please
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: "@swimlane/marketplace"
      - name: Branch Names
        id: branch_names
        uses: tj-actions/branch-names@v5.4

      - uses: actions/github-script@v6
        id: semver
        env:
          MAJOR: ${{steps.release.outputs.major}}
          MINOR: ${{steps.release.outputs.minor}}
          PATCH: ${{steps.release.outputs.patch}}
          PR: ${{steps.release.outputs.pr}}
        with:
          script: |
            const {MAJOR, MINOR, PATCH, PR} = process.env
            if(PR){
              const {title} = JSON.parse(PR)
              const regex = /(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)(-(?<preRelease>[^+]+))?(\+(?<build>.*))?/
              const matches = regex.exec(title)
              
              core.info(matches);
              core.setOutput("full", matches[0]);
            }
            else{
              core.setOutput("full", `${MAJOR}.${MINOR}.${PATCH}`);
            } 

      - name: data
        if: always()
        run: |
          echo "semver ${{steps.semver.outputs.full}}"
          echo "sha ${{steps.release.outputs.sha}}"
          echo "release_created ${{steps.release.outputs.release_created}}"
          echo "branch ${{steps.release.outputs.branch}}"          
          echo "title ${{fromJSON(steps.release.outputs.pr).title}}"

  build:
    name: build
    runs-on: "ubuntu-latest"
    needs:
      - release-prep
    if: ${{ !needs.release-prep.outputs.release_created }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: data
        run: |
          echo "${{matrix.image_name}}"
          echo "semver ${{needs.release-prep.outputs.semver}}"
          echo "sha ${{needs.release-prep.outputs.sha}}"
          echo "release_created ${{needs.release-prep.outputs.release_created}}"
          echo "branch ${{needs.release-prep.outputs.branch}}"

  publish:
    runs-on: "ubuntu-latest"
    if: ${{ needs.release-prep.outputs.release_created }}
    needs:
      - release-prep
    strategy:
      matrix:
        app: ["api", "ui-hub"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: data
        run: |
          echo "${{matrix.image_name}}"
          echo "semver ${{needs.release-prep.outputs.semver}}"
          echo "sha ${{needs.release-prep.outputs.sha}}"
          echo "release_created ${{needs.release-prep.outputs.release_created}}"
          echo "branch ${{needs.release-prep.outputs.branch}}"
